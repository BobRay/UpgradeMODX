<?php
/**
 * Created by PhpStorm.
 * User: BobRay
 * Date: 11/10/2018
 * Time: 2:47 PM
 */

if (! function_exists('rrmdir')) {
    function rrmdir($dir) {
        $dir = rtrim($dir, '/\\');
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (filetype($dir . "/" . $object) == "dir") {
                        $prefix = substr($object, 0, 4);
                        rrmdir($dir . "/" . $object);
                    } else {
                        @unlink($dir . "/" . $object);
                    }
                }
            }
            reset($objects);
            $success = @rmdir($dir);
        }
    }
}

class TestUGM extends PHPUnit_Framework_TestCase {
    /** @var $modx modX - modx object */
    public $modx = null;
    /** @var $ugm UpgradeMODX */
    public $ugm = null;
    public $tempDir = 'c:/dummy/ugmtemp/';
    public $basePath = 'c:/dummy/ugmtemp/test/';
    public $logFilePath = 'C:/dummy/upgrademodx.log';
    public $version = 'modx-2.6.5-pl.zip';

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub
        include 'C:\xampp\htdocs\addons\assets\mycomponents\instantiatemodx\instantiatemodx.php';

        $this->modx =& $modx;
        include 'C:\xampp\htdocs\addons\assets\mycomponents\upgrademodx\core\components\upgrademodx\model\upgrademodx\upgrademodx.class.php';
        $this->ugm = new UpgradeMODX($modx);
        $snippet = $this->modx->getObject('modSnippet', array('name' => 'UpgradeMODXWidget'));
        $props = $snippet->getProperties();
        $props['ugm.devMode'] = false;
        $this->ugm->init($props);
        $this->props = $props;
        $this->modx->lexicon->load('en:upgrademodx:default');
    }

    public function testSetup() {
        $modxDefined = !empty(MODX_CORE_PATH);
        $this::assertTrue($modxDefined);
        $this::assertInstanceOf('modX', $this->modx);
        $this::assertInstanceOf('UpgradeMODX', $this->ugm);
    }

    public function testGetVersions() {
       $file = $this->ugm->versionListPath . 'versionlist';
       unlink($file);

       $currentVersion='2.6.0-pl';
       $result = $this->ugm->upgradeAvailable($currentVersion);
       $this::assertTrue($result);

       $currentVersion = $this->modx->getOption('ugm_latest_version');
        $result = $this->ugm->upgradeAvailable($currentVersion);
        $this::assertFalse($result);
        $this::assertEmpty($this->ugm->getErrors());

        $this::assertTrue($this->ugm->versionListExists());

        $this::assertTrue(file_exists($file));
        $content = file_get_contents($file);
        $versionsToShow = $this->modx->getOption('ugm_versions_to_show');
        $this::assertNotEmpty($versionsToShow);
        /* Make sure we're showing at least as many versions as $versionsToShow */
        $versionCount = substr_count($content, 'MODX Revolution');
        $this::assertGreaterThanOrEqual($versionCount, $versionsToShow);

    }

    public function testDownloadFiles() {
        $devMode = $this->modx->getOption('ugm.devMode');
        $this::assertTrue((bool) $devMode);
        $tempDir = $this->tempDir;
        $logFilePath = $this->logFilePath;
        $version = $this->version;
        $_SESSION['ugm_version'] = $version;
        @unlink($tempDir . $version);
        $this::assertFalse(is_dir($tempDir . $version));
        $options = array(
            'processors_path' => $this->ugm->corePath . 'processors/',
        );
        $config = array(
            'version' => $version,
        );
        $response = $this->modx->runProcessor('downloadFiles', $config, $options);
        $result = $response->response;
        // echo print_r($result, true);
        $this::assertEquals(1, $result['success']);
        $this::assertEmpty($result['errors']);
        $this::assertEquals($this->modx->lexicon('ugm_unzipping_files'), $result['message']);
        $this::assertTrue(file_exists($logFilePath));
        $this::assertTrue(file_exists($tempDir . $version));
        $this::assertGreaterThan(11000000, filesize($tempDir . $version));
    }

    public function testUnzipFiles() {

        $devMode = $this->modx->getOption('ugm.devMode');
        $this::assertTrue((bool)$devMode);
        $tempDir = $this->tempDir;
        rrmdir($tempDir . 'unzipped');

        $logFilePath = $this->logFilePath;
        $version = $this->version;
        $file = str_replace('.zip', '', $version);
        $time = time();
        // rrmdir($tempDir . 'unzipped');
        $this::assertTrue(file_exists($tempDir . $version));
        $options = array(
            'processors_path' => $this->ugm->corePath . 'processors/',
        );
        $config = array(
            'version' => $version,
        );
        $response = $this->modx->runProcessor('unzipfiles', $config, $options);
        $result = $response->response;
        $this::assertEquals($this->modx->lexicon('ugm_copying_files'), $result['message']);
        $this::assertTrue(file_exists($logFilePath));
        $this::assertEquals(1, $result['success']);
        $this::assertEmpty($result['errors']);
        $this::assertTrue(is_dir($tempDir . 'unzipped/' . $file));
        /* Make sure files in unzipped directory are new */
        clearstatcache();
        $mTime = filemtime($tempDir . 'unzipped/' . $file);
        $this::assertGreaterThan($time, $mTime);
        // echo print_r($result, true);
    }

    public function testCopyFiles() {
        $devMode = $this->modx->getOption('ugm.devMode');
        $this::assertTrue((bool)$devMode);
        $tempDir = $this->tempDir;
        $basePath = $this->basePath;
        $corePath = $tempDir . 'test/core/';
        rrmdir($basePath);
        $this::assertFalse(is_dir($basePath));

        $logFilePath = $this->logFilePath;
        $version = $this->version;
        // $file = str_replace('.zip', '', $version);
        $time = time();
        // rrmdir($tempDir . 'unzipped');
        $this::assertTrue(file_exists($tempDir . $version));
        $options = array(
            'processors_path' => $this->ugm->corePath . 'processors/',
        );
        $config = array(
           'version' => $version,
        );
        $this::assertTrue(is_dir($tempDir . 'unzipped'));
        $response = $this->modx->runProcessor('copyfiles', $config, $options);
        $this::assertTrue(is_dir($tempDir . 'test'));
        $result = $response->response;
        $this::assertEquals($this->modx->lexicon('ugm_preparing_setup'), $result['message']);
        $this::assertTrue(file_exists($logFilePath));
        $this::assertEquals(1, $result['success']);
        $this::assertEmpty($result['errors']);

        clearstatcache();
        $directories = array(
            'setup' => $basePath . 'setup/',
            'core' => $corePath,
            'manager' => $basePath . 'manager/',
            'connectors' => $basePath . '/connectors',
            'processors' => $corePath . 'model/modx/processors/',
        );

        foreach($directories as $k => $v) {
            $this::assertTrue(is_dir($v));
            $mTime = filemtime($v);
            $this::assertGreaterThan($time, $mTime);
        }
        // echo print_r($result, true);
    }
    public function testPrepareSetup() {
        $devMode = $this->modx->getOption('ugm.devMode');
        $this::assertTrue((bool)$devMode);
        $logFilePath = $this->logFilePath;
        $tempDir = $this->tempDir;
        $setupDir = $tempDir . 'test/setup/';
        $this::assertTrue(is_dir($setupDir));
        $configFile = $setupDir . 'includes/config.core.php';
        $this::assertTrue(file_exists($configFile));

        $version = $this->version;
        $options = array(
            'processors_path' => $this->ugm->corePath . 'processors/',
        );
        $config = array(
            'version' => $version,
        );

        $response = $this->modx->runProcessor('preparesetup', $config, $options);
        $result = $response->response;

        // echo print_r($result, true);
        $this::assertEquals($this->modx->lexicon('ugm_deleting_temp_files'), $result['message']);
        $this::assertTrue(file_exists($logFilePath));
        $this::assertEquals(1, $result['success']);
        $this::assertEmpty($result['errors']);
        $content = file_get_contents($configFile);
        $this::assertNotEmpty(strpos($content, '@traditional@'));
    }

    public function testCleanup() {
        $version = $this->version;
        $tempDir = $this->tempDir;
        $logFilePath = $this->logFilePath;
        $this::assertTrue(file_exists($logFilePath));
        $options = array(
            'processors_path' => $this->ugm->corePath . 'processors/',
        );
        $config = array(
            'version' => $version,
        );
        $response = $this->modx->runProcessor('cleanup', $config, $options);
        $result = $response->response;

        // echo print_r($result, true);
        $this::assertEquals($this->modx->lexicon('ugm_launching_setup'), $result['message']);
        $this::assertEquals(1, $result['success']);
        $this::assertEmpty($result['errors']);
        $this::assertFalse(is_dir($tempDir . 'unzipped'));

    }


}
